import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    project.ext {
        serenityVersion = '2.3.9'
    }

    repositories {
        mavenLocal()
        jcenter()
    }

    dependencies {
        classpath('net.serenity-bdd:serenity-gradle-plugin:2.3.9')
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'idea'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
}

apply plugin: 'net.serenity-bdd.aggregator'

ext {
    kotlinVersion = '1.3.72'
    junitVersion = '4.13.1'
    javaClientVersion = '7.4.1'
    slf4jVersion = '1.7.30'
}

dependencies {
    implementation 'junit:junit:' + junitVersion
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:' + kotlinVersion
    implementation 'io.appium:java-client:' + javaClientVersion
    implementation 'net.serenity-bdd:serenity-core:' + serenityVersion
    implementation 'net.serenity-bdd:serenity-junit:' + serenityVersion
    implementation 'net.serenity-bdd:serenity-screenplay-webdriver:' + serenityVersion
    implementation 'org.slf4j:slf4j-simple:' + slf4jVersion
}

repositories {
    mavenCentral()
    jcenter()
}

tasks.withType(Test) {
    systemProperty "webdriver.driver", System.getProperty("webdriver.driver")
    systemProperty "appium.hub", System.getProperty("appium.hub")
    systemProperty "appium.platformName", System.getProperty("appium.platformName")
    systemProperty "appium.platformVersion", System.getProperty("appium.platformVersion")
    systemProperty "appium.deviceName", System.getProperty("appium.deviceName")
    systemProperty "appium.automationName", System.getProperty("appium.automationName")
    systemProperty "appium.app", System.getProperty("appium.app")
    systemProperty "org.slf4j.simpleLogger.defaultLogLevel", System.getProperty("org.slf4j.simpleLogger.defaultLogLevel")
    systemProperty "webdriver.timeouts.implicitlywait", System.getProperty("webdriver.timeouts.implicitlywait")
    testLogging {
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STARTED,
                TestLogEvent.STANDARD_OUT,
                TestLogEvent.STANDARD_ERROR
        exceptionFormat TestExceptionFormat.FULL
        showCauses true
        showExceptions true
        showStackTraces true
    }

    testLogging {
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STARTED,
                TestLogEvent.STANDARD_OUT,
                TestLogEvent.STANDARD_ERROR
        exceptionFormat TestExceptionFormat.FULL
        showCauses true
        showExceptions true
        showStackTraces true
    }
    finalizedBy aggregate
}
